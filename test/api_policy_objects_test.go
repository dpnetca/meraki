/*
Meraki Dashboard API

Testing PolicyObjectsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package meraki

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/dpnetca/meraki"
)

func Test_meraki_PolicyObjectsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PolicyObjectsApiService CreateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.CreateOrganizationPolicyObject(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService CreateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.CreateOrganizationPolicyObjectsGroup(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService DeleteOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		httpRes, err := apiClient.PolicyObjectsApi.DeleteOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService DeleteOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		httpRes, err := apiClient.PolicyObjectsApi.DeleteOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService GetOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.GetOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService GetOrganizationPolicyObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.GetOrganizationPolicyObjects(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService GetOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.GetOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService GetOrganizationPolicyObjectsGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.GetOrganizationPolicyObjectsGroups(context.Background(), organizationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService UpdateOrganizationPolicyObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.UpdateOrganizationPolicyObject(context.Background(), organizationId, policyObjectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PolicyObjectsApiService UpdateOrganizationPolicyObjectsGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var organizationId string
		var policyObjectGroupId string

		resp, httpRes, err := apiClient.PolicyObjectsApi.UpdateOrganizationPolicyObjectsGroup(context.Background(), organizationId, policyObjectGroupId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
