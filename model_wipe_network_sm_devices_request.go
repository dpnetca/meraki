/*
Meraki Dashboard API

The Cisco Meraki Dashboard API is a modern REST API based on the OpenAPI specification.  > Date: 06 July, 2022 > > [Recent Updates](https://meraki.io/whats-new/)  ---  [API Documentation](https://meraki.io/api)  [Community Support](https://meraki.io/community)  [Meraki Homepage](https://www.meraki.com) 

API version: 1.23.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package meraki

import (
	"encoding/json"
)

// WipeNetworkSmDevicesRequest struct for WipeNetworkSmDevicesRequest
type WipeNetworkSmDevicesRequest struct {
	// The wifiMac of the device to be wiped.
	WifiMac *string `json:"wifiMac,omitempty"`
	// The id of the device to be wiped.
	Id *string `json:"id,omitempty"`
	// The serial of the device to be wiped.
	Serial *string `json:"serial,omitempty"`
	// The pin number (a six digit value) for wiping a macOS device. Required only for macOS devices.
	Pin *int32 `json:"pin,omitempty"`
}

// NewWipeNetworkSmDevicesRequest instantiates a new WipeNetworkSmDevicesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWipeNetworkSmDevicesRequest() *WipeNetworkSmDevicesRequest {
	this := WipeNetworkSmDevicesRequest{}
	return &this
}

// NewWipeNetworkSmDevicesRequestWithDefaults instantiates a new WipeNetworkSmDevicesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWipeNetworkSmDevicesRequestWithDefaults() *WipeNetworkSmDevicesRequest {
	this := WipeNetworkSmDevicesRequest{}
	return &this
}

// GetWifiMac returns the WifiMac field value if set, zero value otherwise.
func (o *WipeNetworkSmDevicesRequest) GetWifiMac() string {
	if o == nil || o.WifiMac == nil {
		var ret string
		return ret
	}
	return *o.WifiMac
}

// GetWifiMacOk returns a tuple with the WifiMac field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WipeNetworkSmDevicesRequest) GetWifiMacOk() (*string, bool) {
	if o == nil || o.WifiMac == nil {
		return nil, false
	}
	return o.WifiMac, true
}

// HasWifiMac returns a boolean if a field has been set.
func (o *WipeNetworkSmDevicesRequest) HasWifiMac() bool {
	if o != nil && o.WifiMac != nil {
		return true
	}

	return false
}

// SetWifiMac gets a reference to the given string and assigns it to the WifiMac field.
func (o *WipeNetworkSmDevicesRequest) SetWifiMac(v string) {
	o.WifiMac = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *WipeNetworkSmDevicesRequest) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WipeNetworkSmDevicesRequest) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *WipeNetworkSmDevicesRequest) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *WipeNetworkSmDevicesRequest) SetId(v string) {
	o.Id = &v
}

// GetSerial returns the Serial field value if set, zero value otherwise.
func (o *WipeNetworkSmDevicesRequest) GetSerial() string {
	if o == nil || o.Serial == nil {
		var ret string
		return ret
	}
	return *o.Serial
}

// GetSerialOk returns a tuple with the Serial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WipeNetworkSmDevicesRequest) GetSerialOk() (*string, bool) {
	if o == nil || o.Serial == nil {
		return nil, false
	}
	return o.Serial, true
}

// HasSerial returns a boolean if a field has been set.
func (o *WipeNetworkSmDevicesRequest) HasSerial() bool {
	if o != nil && o.Serial != nil {
		return true
	}

	return false
}

// SetSerial gets a reference to the given string and assigns it to the Serial field.
func (o *WipeNetworkSmDevicesRequest) SetSerial(v string) {
	o.Serial = &v
}

// GetPin returns the Pin field value if set, zero value otherwise.
func (o *WipeNetworkSmDevicesRequest) GetPin() int32 {
	if o == nil || o.Pin == nil {
		var ret int32
		return ret
	}
	return *o.Pin
}

// GetPinOk returns a tuple with the Pin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WipeNetworkSmDevicesRequest) GetPinOk() (*int32, bool) {
	if o == nil || o.Pin == nil {
		return nil, false
	}
	return o.Pin, true
}

// HasPin returns a boolean if a field has been set.
func (o *WipeNetworkSmDevicesRequest) HasPin() bool {
	if o != nil && o.Pin != nil {
		return true
	}

	return false
}

// SetPin gets a reference to the given int32 and assigns it to the Pin field.
func (o *WipeNetworkSmDevicesRequest) SetPin(v int32) {
	o.Pin = &v
}

func (o WipeNetworkSmDevicesRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WifiMac != nil {
		toSerialize["wifiMac"] = o.WifiMac
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Serial != nil {
		toSerialize["serial"] = o.Serial
	}
	if o.Pin != nil {
		toSerialize["pin"] = o.Pin
	}
	return json.Marshal(toSerialize)
}

type NullableWipeNetworkSmDevicesRequest struct {
	value *WipeNetworkSmDevicesRequest
	isSet bool
}

func (v NullableWipeNetworkSmDevicesRequest) Get() *WipeNetworkSmDevicesRequest {
	return v.value
}

func (v *NullableWipeNetworkSmDevicesRequest) Set(val *WipeNetworkSmDevicesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableWipeNetworkSmDevicesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableWipeNetworkSmDevicesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWipeNetworkSmDevicesRequest(val *WipeNetworkSmDevicesRequest) *NullableWipeNetworkSmDevicesRequest {
	return &NullableWipeNetworkSmDevicesRequest{value: val, isSet: true}
}

func (v NullableWipeNetworkSmDevicesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWipeNetworkSmDevicesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


